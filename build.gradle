plugins {
    id 'java'
    id 'io.papermc.paperweight.userdev' version '1.7.1'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.gradleup.shadow' version '8.3.0'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.aikar.co/content/groups/aikar/' }
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    paperweight.paperDevBundle("1.21-R0.1-SNAPSHOT")
    compileOnly 'org.jetbrains:annotations:24.1.0'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    implementation 'co.aikar:acf-paper:0.5.1-SNAPSHOT'
    implementation 'com.google.inject:guice:7.0.0'
}

shadowJar {
    relocate 'co.aikar.commands', 'dev.tecte.chesswar.libs.acf'
    relocate 'co.aikar.locales', 'dev.tecte.chesswar.libs.locales'
    relocate 'com.google.inject', 'dev.tecte.chesswar.libs.guice'
    relocate 'javax.inject', 'dev.tecte.chesswar.libs.javax.inject'
    relocate 'jakarta.inject', 'dev.tecte.chesswar.libs.jakarta.inject'
    relocate 'org.aopalliance', 'dev.tecte.chesswar.libs.aopalliance'
}

tasks.runServer {
    minecraftVersion("1.21")
    dependsOn(tasks.build)
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += "-parameters"

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

tasks.named('processResources') {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

// 빌드된 jar 파일을 mainPluginsDir로 복사하는 작업 (버전 포함)
tasks.register('copyVersionedJar', Copy) {
    from shadowJar.archiveFile // 빌드된 jar 파일 (예: ChessWar-1.0.0.jar)
    def mainPluginsDir = findProperty('mainPluginsDir')
    if (mainPluginsDir && new File(mainPluginsDir as String).exists()) {
        into(mainPluginsDir)
    }
}

// 빌드된 jar 파일을 serverPluginsDir로 복사하고 이름을 변경하는 작업 (버전 제외)
tasks.register('copyUnversionedJar', Copy) {
    from shadowJar.archiveFile // 빌드된 jar 파일 (예: ChessWar-1.0.0.jar)
    def serverPluginsDir = findProperty('serverPluginsDir')
    if (serverPluginsDir && new File(serverPluginsDir as String).exists()) {
        into(serverPluginsDir)
        rename { _ -> 'ChessWar.jar' }
    }
}

// build 작업 완료 후 지정된 후속 작업을 실행하도록 설정
tasks.build.configure {
    dependsOn(shadowJar)
    finalizedBy 'copyVersionedJar', 'copyUnversionedJar'
}

// 전이 의존성 버전 관리
configurations.configureEach {
    resolutionStrategy {
        force 'org.apache.commons:commons-lang3:3.18.0' // commons-lang3 라이브러리의 버전을 3.18.0으로 강제하여 보안 취약점 해결
        force 'com.google.guava:guava:33.2.0-jre' // Guava 버전을 보안 취약점이 해결된 버전으로 강제
    }
}
